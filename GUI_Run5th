import tkinter as tk
from tkinter import ttk
from tkinter.messagebox import showinfo
import datetime
from SQLite import students
from NamesLists import president_names, officer_names, es_faculty_names, sb_faculty_names, as_faculty_names
from NamesLists import eh_faculty_names
from Classes import PresidentVotes, GSUOfficerVotes, FacultyOfficerVotes
from SQLiteQueries import president_main, faculty_main, officer_main

# Creating global variables initially to check later that the user has not voted for a position twice
globals()["presidential_votes"] = 0
globals()["faculty_votes"] = 0
globals()["officer_votes"] = 0


class MainWindow:

    def __init__(self, master):
        self.master = master

        # Setting the window up
        self.master.geometry("850x750")
        self.master.configure(background="RoyalBlue4")
        self.master.title("GSU ELECTIONS 2020")
        self.master.resizable(width=False, height=False)

        self.main_label = tk.Label(text="GSU Elections 2020", bg="RoyalBlue4", width="150", height="4", fg="white",
                                   font=("Arial", "55", "bold", "italic"))
        self.main_label.place(relx=0.5, rely=0.40, anchor="center")

        self.vote_button = tk.Button(text="Vote", height="3", width=30, command=self.vote)
        self.vote_button.place(relx=0.10, rely=0.75, anchor="sw")

        self.quit_button = tk.Button(text="Quit", height="3", width=30, command=self.close_window)
        self.quit_button.place(relx=0.65, rely=0.75, anchor="sw")

    def vote(self):
        """
        Functionality for user when they press vote on main page
        """
        # Code below checks that voting is open
        open_date = datetime.date.today()
        start_date = datetime.date(2019, 12, 7)
        end_date = datetime.date(2020, 1, 30)

        if start_date <= open_date <= end_date:
            self.new_window()
        else:
            showinfo("Alert Message", "Voting is now closed")

    def close_window(self):
        self.master.destroy()

    def new_window(self):
        self.main_label.destroy()
        self.vote_button.destroy()
        self.quit_button.destroy()

        # next window
        self.second_window = SecondWindow(self.master)


class SecondWindow:

    def __init__(self, master):
        self.master = master

        # todo background code goes here but focus on getting everything right first

        # login text
        self.login_label = tk.Label(text="Log in with your University Username and Password", bg="RoyalBlue4",
                                    fg="white", width="48", height="2", font=("Arial", "15", "bold", "italic"))
        self.login_label.place(relx=0.70, rely=0.25, anchor="center")

        # login buttons and functionality
        # self.username_verify = tk.StringVar()
        # self.password_verify = tk.StringVar()

        # Login buttons and Labels
        self.user_label = tk.Label(text="Username", width="15", height="1", bg="RoyalBlue4",
                                   fg="white", font=("Arial", "10", "bold"))
        self.user_label.place(relx=0.50, rely=0.35, anchor="center")
        self.user_entry = tk.Entry(width="25", borderwidth="3", relief="sunken")
        self.user_entry.place(relx=0.83, rely=0.35, anchor="e")
        self.password_label = tk.Label(text="Password", width="15", height="1", bg="RoyalBlue4",
                                       fg="white", font=("Arial", "10", "bold"))
        self.password_label.place(relx=0.5, rely=0.40, anchor="center")

        # todo - add argument   show = "*" BELOW
        self.password_entry = tk.Entry(width="25", borderwidth="3", relief="sunken")
        self.password_entry.place(relx=0.83, rely=0.39, anchor="e")
        self.login_entry = tk.Button(text="Log In", height="2", width=5, command=self.check_user)
        self.login_entry.place(relx=0.89, rely=0.37, anchor="e")

    def check_user(self):
        # todo create code in the for loop that checks that the user has not already voted, using the voting SQLite
        #  tables. If they have voted then bring up a message saying they cannot vote again.
        self.valid_user = False
        self.password_attempt = self.password_entry.get()
        self.username_attempt = self.user_entry.get()

        for student in students:
            if student.username == self.username_attempt and student.password == self.password_attempt:
                # check that student is registered to vote or note
                if student.has_registered:
                    self.valid_user = True
                    self.new_window()
                    globals()["student_faculty"] = student.faculty
                    globals()["student_username"] = student.username
                else:
                    # todo change the not voting message so that it says please contact member of staff. Have as label?
                    self.valid_user = True
                    showinfo("Window", "Sorry {}, you are not registered to vote. "
                                       "Please contact the GSU to request permission to vote".format(student.forename))
        if not self.valid_user:
            self.password_entry.delete(0, "end")
            self.user_entry.delete(0, "end")
            showinfo("Incorrect Details", "Incorrect password or username. Please try again")

    def new_window(self):
        # todo possibly print success message to let user know that login passed
        self.login_label.destroy()
        self.user_label.destroy()
        self.user_entry.destroy()
        self.password_entry.destroy()
        self.password_label.destroy()
        self.login_entry.destroy()

        # next window
        self.third_window = ThirdWindow(self.master)


class ThirdWindow:
    def __init__(self, master):
        self.master = master

        # todo create a button for user to logout with takes them back to the page before. Button in top left corner

        # todo add a photo above the below label linked with the GSU i.e their logo

        # todo add commands to every button that takes the user to a separate interface depending on the button pressed

        self.choose_label = tk.Label(text="Choose your GSU Officer!", bg="RoyalBlue4", width="100",
                                     height="4", fg="white", font=("Arial", "40", "bold", "italic"))
        self.choose_label.place(relx=0.5, rely=0.50, anchor="center")

        self.president_button = tk.Button(text="GSU President", height="3", width=20, command=self.vote_president)
        self.president_button.place(relx=0.5, rely=0.70, anchor="center")

        self.officer_button = tk.Button(text="GSU Officers", height="3", width=20, command=self.vote_officer)
        self.officer_button.place(relx=0.20, rely=0.70, anchor="center")

        self.faculty_button = tk.Button(text="GSU Faculty Officers", height="3", width=20, command=self.vote_faculty)
        self.faculty_button.place(relx=0.80, rely=0.70, anchor="center")

        self.back_button = tk.Button(text="Sign Out", height="1", width=10, command=self.go_back)
        self.back_button.place(relx=0.06, rely=0.03, anchor="center")

    def go_back(self):
        self.choose_label.destroy()
        self.president_button.destroy()
        self.officer_button.destroy()
        self.faculty_button.destroy()
        self.back_button.destroy()
        # todo possibly create a new separate window/class to thank the user for voting and if another user wants
        #  to vote then they need to restart the program. Otherwise a student cannot vote correctly
        self.logout_window = SecondWindow(self.master)

    def vote_president(self):
        global presidential_votes

        if not presidential_votes:
            self.choose_label.destroy()
            self.president_button.destroy()
            self.officer_button.destroy()
            self.faculty_button.destroy()
            self.back_button.destroy()
            # Next window class
            self.president_window = PresidentWindow(self.master)
        else:
            showinfo("window", "You cannot vote for this position again. Please try another position")

    def vote_officer(self):
        global officer_votes

        if not officer_votes:
            self.choose_label.destroy()
            self.president_button.destroy()
            self.officer_button.destroy()
            self.faculty_button.destroy()
            self.back_button.destroy()
            self.officer_window = OfficerWindow(self.master)
        else:
            showinfo("window", "You cannot vote for this position again. Please try another position")

    def vote_faculty(self):
        global faculty_votes

        if not faculty_votes:
            self.choose_label.destroy()
            self.president_button.destroy()
            self.officer_button.destroy()
            self.faculty_button.destroy()
            self.back_button.destroy()

            # Code checks what faculty the user is in and then takes them to the correct page
            global student_faculty
            if student_faculty == "EH":
                self.eh_faculty__window = FacultyWindowEH(self.master)
            elif student_faculty == "ES":
                self.es_faculty_window = FacultyWindowES(self.master)
            elif student_faculty == "AS":
                self.as_faculty_window = FacultyWindowAS(self.master)
            elif student_faculty == "SB":
                self.sb_faculty_window = FacultyWindowSB(self.master)
        else:
            showinfo("window", "You cannot vote for this position again. Please try another position")


class PresidentWindow:

    def __init__(self, master):
        self.master = master

        # Main Headers
        self.president_label = tk.Label(text="GSU President!", bg="RoyalBlue4", width="100",
                                        height="4", fg="white", font=("Arial", "40", "bold", "italic"))
        self.president_label.place(relx=0.5, rely=0.10, anchor="center")

        self.president_two_label = tk.Label(text="Please rank each candidate in order of preference",
                                            bg="RoyalBlue4", width="55", height="4", fg="white",
                                            font=("Arial", "15", "bold", "italic"))
        self.president_two_label.place(relx=0.5, rely=0.2, anchor="center")

        # todo add four photos to GUI showing icons off candidates

        # All combo boxes

        self.first_box = ttk.Combobox(values=president_names)
        self.first_box.place(relx=0.15, rely=0.75, anchor="center")
        self.second_box = ttk.Combobox(values=president_names)
        self.second_box.place(relx=0.375, rely=0.75, anchor="center")
        self.third_box = ttk.Combobox(values=president_names)
        self.third_box.place(relx=0.625, rely=0.75, anchor="center")
        self.fourth_box = ttk.Combobox(values=president_names)
        self.fourth_box.place(relx=0.85, rely=0.75, anchor="center")

        # Preference labels
        self.first_label = tk.Label(text="1st Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.first_label.place(relx=0.15, rely=0.80, anchor="center")
        self.second_label = tk.Label(text="2nd Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.second_label.place(relx=0.375, rely=0.8, anchor="center")
        self.third_label = tk.Label(text="3rd Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", 11, "bold", "italic"))
        self.third_label.place(relx=0.625, rely=0.8, anchor="center")
        self.fourth_label = tk.Label(text="4th Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.fourth_label.place(relx=0.85, rely=0.80, anchor="center")

        # Buttons
        self.back_button = tk.Button(text="Back", height="1", width=10, command=self.go_back)
        self.back_button.place(relx=0.06, rely=0.03, anchor="center")
        self.save_choice = tk.Button(text="Save Choice", height="2", width=15, command=self.save_choice)
        self.save_choice.place(relx=0.5, rely=0.9, anchor="center")

    def save_choice(self):
        global student_username
        self.first_choice = self.first_box.get()
        self.second_choice = self.second_box.get()
        self.third_choice = self.third_box.get()
        self.fourth_choice = self.fourth_box.get()
        globals()["presidential_votes"] = 0

        # if user has voted for all four preferences correctly without errors then save entry and continue
        if (self.first_box.get() in president_names and self.second_box.get() in president_names and
                self.third_box.get() in president_names and self.fourth_box.get() in president_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.first_box.get() != self.fourth_box.get() and self.second_box.get() != self.third_box.get() and
                    self.second_box.get() != self.fourth_box.get() and self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    # todo create functionality to show that the input has been saved
                    # todo review notes from to do list about creating a variable to check what user has voted for
                    globals()["presidential_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    president_main(username=student_username, first_pref=self.first_choice,
                                   second_pref=self.second_choice, third_pref=self.third_choice,
                                   fourth_pref=self.fourth_choice)
                    self.go_back()

            # If user selects the same candidate twice
            elif (self.first_box.get() == self.second_box.get() or self.first_box.get() == self.third_box.get() or
                  self.first_box.get() == self.fourth_box.get() or self.second_box.get() == self.third_box.get() or
                  self.second_box.get() == self.fourth_box.get() or self.third_box.get() == self.fourth_box.get()):
                showinfo("window", "You cannot select the same candidate twice. Please try again")

        # if user only votes for first preference
        elif (self.first_box.get() in president_names and self.second_box.get() == "" and self.third_box.get() == ""
              and self.fourth_box.get() == ""):
            self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choice")
            if self.msgbox == "yes":
                globals()["presidential_votes"] = 1
                president_main(username=student_username, first_pref=self.first_choice)
                self.go_back()

        # if user votes for 1st and 2nd preference but not 3rd or 4th
        elif (self.first_box.get() in president_names and self.second_box.get() in president_names and
              self.third_box.get() == "" and self.fourth_box.get() == ""):
            if self.first_box.get() != self.second_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["presidential_votes"] = 1
                    president_main(username=student_username, first_pref=self.first_choice,
                                   second_pref=self.second_choice)
                    self.go_back()

            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 3rd but not 2nd or 4th
        elif (self.first_box.get() in president_names and self.second_box.get() == "" and
              self.third_box.get() in president_names and self.fourth_box.get() == ""):
            if self.first_box.get() != self.third_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["presidential_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    president_main(username=student_username, first_pref=self.first_choice,
                                   third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 4th but not 2nd or 3rd
        elif (self.first_box.get() in president_names and self.second_box.get() == "" and
              self.third_box.get() == "" and self.fourth_box.get() in president_names):
            if self.first_box.get() != self.fourth_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["presidential_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    president_main(username=student_username, first_pref=self.first_choice,
                                   fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 3rd and 4th but not 2nd
        elif (self.first_box.get() in president_names and self.second_box.get() == "" and
              self.third_box.get() in president_names and self.fourth_box.get() in president_names):
            if (self.first_box.get() != self.fourth_box.get() and self.first_box.get() != self.third_box.get() and
                    self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["presidential_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    president_main(username=student_username, first_pref=self.first_choice,
                                   third_pref=self.third_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 4th but not 3rd
        elif (self.first_box.get() in president_names and self.second_box.get() in president_names and
              self.third_box.get() == "" and self.fourth_box.get() in president_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.fourth_box.get() and
                    self.second_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["presidential_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    president_main(username=student_username, first_pref=self.first_choice,
                                   second_pref=self.second_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 3rd but not 4th
        elif (self.first_box.get() in president_names and self.second_box.get() in president_names and
              self.third_box.get() in president_names and self.fourth_box.get() == ""):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.second_box.get() != self.third_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["presidential_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    president_main(username=student_username, first_pref=self.first_choice,
                                   second_pref=self.second_choice, third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # Incorrect voting
        else:
            showinfo("Incorrect Input", "You have voted incorrectly please try again")
            # todo enter a message in box that reminds the user how to vote correctly i.e the rules

    def go_back(self):
        self.president_label.destroy()
        self.president_two_label.destroy()
        self.first_box.destroy()
        self.second_box.destroy()
        self.third_box.destroy()
        self.fourth_box.destroy()
        self.first_label.destroy()
        self.second_label.destroy()
        self.third_label.destroy()
        self.fourth_label.destroy()
        self.back_button.destroy()
        self.save_choice.destroy()
        self.third_window = ThirdWindow(self.master)


class FacultyWindowEH:

    def __init__(self, master):
        self.master = master

        # Main Headers
        self.faculty_label = tk.Label(text="GSU Faculty Officers!", bg="RoyalBlue4", width="100",
                                      height="6", fg="white", font=("Arial", "40", "bold", "italic"))
        self.faculty_label.place(relx=0.5, rely=0.10, anchor="center")

        self.faculty_two_label = tk.Label(text="Please rank each candidate in order of preference",
                                          bg="RoyalBlue4", width="55", height="3", fg="white",
                                          font=("Arial", "15", "bold", "italic"))
        self.faculty_two_label.place(relx=0.5, rely=0.2, anchor="center")

        self.unique_label = tk.Label(text="Faculty of Education, Health and Human Sciences", bg="RoyalBlue4",
                                     width="75", height="4", fg="white", font=("Arial", "25", "bold", "italic"))
        self.unique_label.place(relx=0.5, rely=0.68, anchor="center")

        # todo add four photos to GUI showing icons off candidates

        # All combo boxes
        self.first_box = ttk.Combobox(values=eh_faculty_names)
        self.first_box.place(relx=0.15, rely=0.75, anchor="center")
        self.second_box = ttk.Combobox(values=eh_faculty_names)
        self.second_box.place(relx=0.375, rely=0.75, anchor="center")
        self.third_box = ttk.Combobox(values=eh_faculty_names)
        self.third_box.place(relx=0.625, rely=0.75, anchor="center")
        self.fourth_box = ttk.Combobox(values=eh_faculty_names)
        self.fourth_box.place(relx=0.85, rely=0.75, anchor="center")

        # Preference labels
        self.first_label = tk.Label(text="1st Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.first_label.place(relx=0.15, rely=0.80, anchor="center")
        self.second_label = tk.Label(text="2nd Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.second_label.place(relx=0.375, rely=0.8, anchor="center")
        self.third_label = tk.Label(text="3rd Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", 11, "bold", "italic"))
        self.third_label.place(relx=0.625, rely=0.8, anchor="center")
        self.fourth_label = tk.Label(text="4th Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.fourth_label.place(relx=0.85, rely=0.80, anchor="center")

        # Buttons
        self.back_button = tk.Button(text="Back", height="1", width=10, command=self.go_back)
        self.back_button.place(relx=0.06, rely=0.03, anchor="center")
        self.save_choice = tk.Button(text="Save Choice", height="2", width=15, command=self.save_choice)
        self.save_choice.place(relx=0.5, rely=0.9, anchor="center")

    def save_choice(self):
        global student_username
        self.first_choice = self.first_box.get()
        self.second_choice = self.second_box.get()
        self.third_choice = self.third_box.get()
        self.fourth_choice = self.fourth_box.get()
        globals()["faculty_votes"] = 0

        # if user has voted for all four preferences correctly without errors then save entry and continue
        if (self.first_box.get() in eh_faculty_names and self.second_box.get() in eh_faculty_names and
                self.third_box.get() in eh_faculty_names and self.fourth_box.get() in eh_faculty_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.first_box.get() != self.fourth_box.get() and self.second_box.get() != self.third_box.get() and
                    self.second_box.get() != self.fourth_box.get() and self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    # todo create functionality to show that the input has been saved
                    # todo review notes from to do list about creating a variable to check what user has voted for
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="EH", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()

            # If user selects the same candidate twice
            elif (self.first_box.get() == self.second_box.get() or self.first_box.get() == self.third_box.get() or
                  self.first_box.get() == self.fourth_box.get() or self.second_box.get() == self.third_box.get() or
                  self.second_box.get() == self.fourth_box.get() or self.third_box.get() == self.fourth_box.get()):
                showinfo("window", "You cannot select the same candidate twice. Please try again")

        # if user only votes for first preference
        elif (self.first_box.get() in eh_faculty_names and self.second_box.get() == "" and self.third_box.get() == ""
              and self.fourth_box.get() == ""):
            self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choice")
            if self.msgbox == "yes":
                globals()["faculty_votes"] = 1
                faculty_main(faculty="EH", username=student_username, first_pref=self.first_choice)
                self.go_back()

        # if user votes for 1st and 2nd preference but not 3rd or 4th
        elif (self.first_box.get() in eh_faculty_names and self.second_box.get() in eh_faculty_names and
              self.third_box.get() == "" and self.fourth_box.get() == ""):
            if self.first_box.get() != self.second_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    self.go_back()
                    faculty_main(faculty="EH", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice)
                    self.go_back()

            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 3rd but not 2nd or 4th
        elif (self.first_box.get() in eh_faculty_names and self.second_box.get() == "" and
              self.third_box.get() in eh_faculty_names and self.fourth_box.get() == ""):
            if self.first_box.get() != self.third_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="EH", username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 4th but not 2nd or 3rd
        elif (self.first_box.get() in eh_faculty_names and self.second_box.get() == "" and
              self.third_box.get() == "" and self.fourth_box.get() in eh_faculty_names):
            if self.first_box.get() != self.fourth_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="EH", username=student_username, first_pref=self.first_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 3rd and 4th but not 2nd
        elif (self.first_box.get() in eh_faculty_names and self.second_box.get() == "" and
              self.third_box.get() in eh_faculty_names and self.fourth_box.get() in eh_faculty_names):
            if (self.first_box.get() != self.fourth_box.get() and self.first_box.get() != self.third_box.get() and
                    self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="EH", username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 4th but not 3rd
        elif (self.first_box.get() in eh_faculty_names and self.second_box.get() in eh_faculty_names and
              self.third_box.get() == "" and self.fourth_box.get() in eh_faculty_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.fourth_box.get() and
                    self.second_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="EH", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 3rd but not 4th
        elif (self.first_box.get() in eh_faculty_names and self.second_box.get() in eh_faculty_names and
              self.third_box.get() in eh_faculty_names and self.fourth_box.get() == ""):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.second_box.get() != self.third_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="EH", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # Incorrect voting
        else:
            showinfo("Incorrect Input", "You have voted incorrectly please try again")
            # todo enter a message in box that reminds the user how to vote correctly i.e the rules

    def go_back(self):
        self.faculty_label.destroy()
        self.faculty_two_label.destroy()
        self.first_box.destroy()
        self.second_box.destroy()
        self.third_box.destroy()
        self.fourth_box.destroy()
        self.first_label.destroy()
        self.second_label.destroy()
        self.third_label.destroy()
        self.fourth_label.destroy()
        self.back_button.destroy()
        self.save_choice.destroy()
        self.unique_label.destroy()
        self.third_window = ThirdWindow(self.master)


class FacultyWindowES:

    def __init__(self, master):
        self.master = master

        # Main Headers
        self.faculty_label = tk.Label(text="GSU Faculty Officers!", bg="RoyalBlue4", width="100",
                                      height="6", fg="white", font=("Arial", "40", "bold", "italic"))
        self.faculty_label.place(relx=0.5, rely=0.10, anchor="center")

        self.faculty_two_label = tk.Label(text="Please rank each candidate in order of preference",
                                          bg="RoyalBlue4", width="55", height="3", fg="white",
                                          font=("Arial", "15", "bold", "italic"))
        self.faculty_two_label.place(relx=0.5, rely=0.2, anchor="center")

        self.unique_label = tk.Label(text="Faculty of Engineering and Science", bg="RoyalBlue4",
                                     width="75", height="4", fg="white", font=("Arial", "25", "bold", "italic"))
        self.unique_label.place(relx=0.5, rely=0.68, anchor="center")

        # todo add four photos to GUI showing icons off candidates

        # All combo boxes
        self.first_box = ttk.Combobox(values=es_faculty_names)
        self.first_box.place(relx=0.15, rely=0.75, anchor="center")
        self.second_box = ttk.Combobox(values=es_faculty_names)
        self.second_box.place(relx=0.375, rely=0.75, anchor="center")
        self.third_box = ttk.Combobox(values=es_faculty_names)
        self.third_box.place(relx=0.625, rely=0.75, anchor="center")
        self.fourth_box = ttk.Combobox(values=es_faculty_names)
        self.fourth_box.place(relx=0.85, rely=0.75, anchor="center")

        # Preference labels
        self.first_label = tk.Label(text="1st Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.first_label.place(relx=0.15, rely=0.80, anchor="center")
        self.second_label = tk.Label(text="2nd Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.second_label.place(relx=0.375, rely=0.8, anchor="center")
        self.third_label = tk.Label(text="3rd Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", 11, "bold", "italic"))
        self.third_label.place(relx=0.625, rely=0.8, anchor="center")
        self.fourth_label = tk.Label(text="4th Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.fourth_label.place(relx=0.85, rely=0.80, anchor="center")

        # Buttons
        self.back_button = tk.Button(text="Back", height="1", width=10, command=self.go_back)
        self.back_button.place(relx=0.06, rely=0.03, anchor="center")
        self.save_choice = tk.Button(text="Save Choice", height="2", width=15, command=self.save_choice)
        self.save_choice.place(relx=0.5, rely=0.9, anchor="center")

    def save_choice(self):
        global student_username
        self.first_choice = self.first_box.get()
        self.second_choice = self.second_box.get()
        self.third_choice = self.third_box.get()
        self.fourth_choice = self.fourth_box.get()
        globals()["faculty_votes"] = 0

        # if user has voted for all four preferences correctly without errors then save entry and continue
        if (self.first_box.get() in es_faculty_names and self.second_box.get() in es_faculty_names and
                self.third_box.get() in es_faculty_names and self.fourth_box.get() in es_faculty_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.first_box.get() != self.fourth_box.get() and self.second_box.get() != self.third_box.get() and
                    self.second_box.get() != self.fourth_box.get() and self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    # todo create functionality to show that the input has been saved
                    # todo review notes from to do list about creating a variable to check what user has voted for
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="ES", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()

            # If user selects the same candidate twice
            elif (self.first_box.get() == self.second_box.get() or self.first_box.get() == self.third_box.get() or
                  self.first_box.get() == self.fourth_box.get() or self.second_box.get() == self.third_box.get() or
                  self.second_box.get() == self.fourth_box.get() or self.third_box.get() == self.fourth_box.get()):
                showinfo("window", "You cannot select the same candidate twice. Please try again")

        # if user only votes for first preference
        elif (self.first_box.get() in es_faculty_names and self.second_box.get() == "" and self.third_box.get() == ""
              and self.fourth_box.get() == ""):
            self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choice")
            if self.msgbox == "yes":
                globals()["faculty_votes"] = 1
                faculty_main(faculty="ES", username=student_username, first_pref=self.first_choice)
                self.go_back()

        # if user votes for 1st and 2nd preference but not 3rd or 4th
        elif (self.first_box.get() in es_faculty_names and self.second_box.get() in es_faculty_names and
              self.third_box.get() == "" and self.fourth_box.get() == ""):
            if self.first_box.get() != self.second_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    self.go_back()
                    faculty_main(faculty="ES", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice)
                    self.go_back()

            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 3rd but not 2nd or 4th
        elif (self.first_box.get() in es_faculty_names and self.second_box.get() == "" and
              self.third_box.get() in es_faculty_names and self.fourth_box.get() == ""):
            if self.first_box.get() != self.third_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="ES", username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 4th but not 2nd or 3rd
        elif (self.first_box.get() in es_faculty_names and self.second_box.get() == "" and
              self.third_box.get() == "" and self.fourth_box.get() in es_faculty_names):
            if self.first_box.get() != self.fourth_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="ES", username=student_username, first_pref=self.first_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 3rd and 4th but not 2nd
        elif (self.first_box.get() in es_faculty_names and self.second_box.get() == "" and
              self.third_box.get() in es_faculty_names and self.fourth_box.get() in es_faculty_names):
            if (self.first_box.get() != self.fourth_box.get() and self.first_box.get() != self.third_box.get() and
                    self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="ES", username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 4th but not 3rd
        elif (self.first_box.get() in es_faculty_names and self.second_box.get() in es_faculty_names and
              self.third_box.get() == "" and self.fourth_box.get() in es_faculty_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.fourth_box.get() and
                    self.second_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="ES", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 3rd but not 4th
        elif (self.first_box.get() in es_faculty_names and self.second_box.get() in es_faculty_names and
              self.third_box.get() in es_faculty_names and self.fourth_box.get() == ""):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.second_box.get() != self.third_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="ES", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # Incorrect voting
        else:
            showinfo("Incorrect Input", "You have voted incorrectly please try again")
            # todo enter a message in box that reminds the user how to vote correctly i.e the rules

    def go_back(self):
        self.faculty_label.destroy()
        self.faculty_two_label.destroy()
        self.first_box.destroy()
        self.second_box.destroy()
        self.third_box.destroy()
        self.fourth_box.destroy()
        self.first_label.destroy()
        self.second_label.destroy()
        self.third_label.destroy()
        self.fourth_label.destroy()
        self.back_button.destroy()
        self.save_choice.destroy()
        self.unique_label.destroy()
        self.third_window = ThirdWindow(self.master)


class FacultyWindowAS:

    def __init__(self, master):
        self.master = master

        # Main Headers
        self.faculty_label = tk.Label(text="GSU Faculty Officers!", bg="RoyalBlue4", width="100",
                                      height="6", fg="white", font=("Arial", "40", "bold", "italic"))
        self.faculty_label.place(relx=0.5, rely=0.10, anchor="center")

        self.faculty_two_label = tk.Label(text="Please rank each candidate in order of preference",
                                          bg="RoyalBlue4", width="55", height="3", fg="white",
                                          font=("Arial", "15", "bold", "italic"))
        self.faculty_two_label.place(relx=0.5, rely=0.2, anchor="center")

        self.unique_label = tk.Label(text="Faculty of Liberal Arts and Sciences", bg="RoyalBlue4",
                                     width="75", height="4", fg="white", font=("Arial", "25", "bold", "italic"))
        self.unique_label.place(relx=0.5, rely=0.68, anchor="center")

        # todo add four photos to GUI showing icons off candidates

        # All combo boxes
        self.first_box = ttk.Combobox(values=as_faculty_names)
        self.first_box.place(relx=0.15, rely=0.75, anchor="center")
        self.second_box = ttk.Combobox(values=as_faculty_names)
        self.second_box.place(relx=0.375, rely=0.75, anchor="center")
        self.third_box = ttk.Combobox(values=as_faculty_names)
        self.third_box.place(relx=0.625, rely=0.75, anchor="center")
        self.fourth_box = ttk.Combobox(values=as_faculty_names)
        self.fourth_box.place(relx=0.85, rely=0.75, anchor="center")

        # Preference labels
        self.first_label = tk.Label(text="1st Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.first_label.place(relx=0.15, rely=0.80, anchor="center")
        self.second_label = tk.Label(text="2nd Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.second_label.place(relx=0.375, rely=0.8, anchor="center")
        self.third_label = tk.Label(text="3rd Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", 11, "bold", "italic"))
        self.third_label.place(relx=0.625, rely=0.8, anchor="center")
        self.fourth_label = tk.Label(text="4th Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.fourth_label.place(relx=0.85, rely=0.80, anchor="center")

        # Buttons
        self.back_button = tk.Button(text="Back", height="1", width=10, command=self.go_back)
        self.back_button.place(relx=0.06, rely=0.03, anchor="center")
        self.save_choice = tk.Button(text="Save Choice", height="2", width=15, command=self.save_choice)
        self.save_choice.place(relx=0.5, rely=0.9, anchor="center")

    def save_choice(self):
        global student_username
        self.first_choice = self.first_box.get()
        self.second_choice = self.second_box.get()
        self.third_choice = self.third_box.get()
        self.fourth_choice = self.fourth_box.get()
        globals()["faculty_votes"] = 0

        # if user has voted for all four preferences correctly without errors then save entry and continue
        if (self.first_box.get() in as_faculty_names and self.second_box.get() in as_faculty_names and
                self.third_box.get() in as_faculty_names and self.fourth_box.get() in as_faculty_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.first_box.get() != self.fourth_box.get() and self.second_box.get() != self.third_box.get() and
                    self.second_box.get() != self.fourth_box.get() and self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    # todo create functionality to show that the input has been saved
                    # todo review notes from to do list about creating a variable to check what user has voted for
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="AS", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()

            # If user selects the same candidate twice
            elif (self.first_box.get() == self.second_box.get() or self.first_box.get() == self.third_box.get() or
                  self.first_box.get() == self.fourth_box.get() or self.second_box.get() == self.third_box.get() or
                  self.second_box.get() == self.fourth_box.get() or self.third_box.get() == self.fourth_box.get()):
                showinfo("window", "You cannot select the same candidate twice. Please try again")

        # if user only votes for first preference
        elif (self.first_box.get() in as_faculty_names and self.second_box.get() == "" and self.third_box.get() == ""
              and self.fourth_box.get() == ""):
            self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choice")
            if self.msgbox == "yes":
                globals()["faculty_votes"] = 1
                faculty_main(faculty="AS", username=student_username, first_pref=self.first_choice)
                self.go_back()

        # if user votes for 1st and 2nd preference but not 3rd or 4th
        elif (self.first_box.get() in as_faculty_names and self.second_box.get() in as_faculty_names and
              self.third_box.get() == "" and self.fourth_box.get() == ""):
            if self.first_box.get() != self.second_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    self.go_back()
                    faculty_main(faculty="AS", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice)
                    self.go_back()

            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 3rd but not 2nd or 4th
        elif (self.first_box.get() in as_faculty_names and self.second_box.get() == "" and
              self.third_box.get() in as_faculty_names and self.fourth_box.get() == ""):
            if self.first_box.get() != self.third_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="AS", username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 4th but not 2nd or 3rd
        elif (self.first_box.get() in as_faculty_names and self.second_box.get() == "" and
              self.third_box.get() == "" and self.fourth_box.get() in as_faculty_names):
            if self.first_box.get() != self.fourth_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="AS", username=student_username, first_pref=self.first_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 3rd and 4th but not 2nd
        elif (self.first_box.get() in as_faculty_names and self.second_box.get() == "" and
              self.third_box.get() in as_faculty_names and self.fourth_box.get() in as_faculty_names):
            if (self.first_box.get() != self.fourth_box.get() and self.first_box.get() != self.third_box.get() and
                    self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="AS", username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 4th but not 3rd
        elif (self.first_box.get() in as_faculty_names and self.second_box.get() in as_faculty_names and
              self.third_box.get() == "" and self.fourth_box.get() in as_faculty_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.fourth_box.get() and
                    self.second_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="AS", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 3rd but not 4th
        elif (self.first_box.get() in as_faculty_names and self.second_box.get() in as_faculty_names and
              self.third_box.get() in as_faculty_names and self.fourth_box.get() == ""):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.second_box.get() != self.third_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="AS", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # Incorrect voting
        else:
            showinfo("Incorrect Input", "You have voted incorrectly please try again")
            # todo enter a message in box that reminds the user how to vote correctly i.e the rules

    def go_back(self):
        self.faculty_label.destroy()
        self.faculty_two_label.destroy()
        self.first_box.destroy()
        self.second_box.destroy()
        self.third_box.destroy()
        self.fourth_box.destroy()
        self.first_label.destroy()
        self.second_label.destroy()
        self.third_label.destroy()
        self.fourth_label.destroy()
        self.back_button.destroy()
        self.save_choice.destroy()
        self.unique_label.destroy()
        self.third_window = ThirdWindow(self.master)


class FacultyWindowSB:

    def __init__(self, master):
        self.master = master

        # Main Headers
        self.faculty_label = tk.Label(text="GSU Faculty Officers!", bg="RoyalBlue4", width="100",
                                      height="6", fg="white", font=("Arial", "40", "bold", "italic"))
        self.faculty_label.place(relx=0.5, rely=0.10, anchor="center")

        self.faculty_two_label = tk.Label(text="Please rank each candidate in order of preference",
                                          bg="RoyalBlue4", width="55", height="3", fg="white",
                                          font=("Arial", "15", "bold", "italic"))
        self.faculty_two_label.place(relx=0.5, rely=0.2, anchor="center")

        self.unique_label = tk.Label(text="School of Business", bg="RoyalBlue4",
                                     width="75", height="4", fg="white", font=("Arial", "25", "bold", "italic"))
        self.unique_label.place(relx=0.5, rely=0.68, anchor="center")

        # todo add four photos to GUI showing icons off candidates

        # All combo boxes
        self.first_box = ttk.Combobox(values=sb_faculty_names)
        self.first_box.place(relx=0.15, rely=0.75, anchor="center")
        self.second_box = ttk.Combobox(values=sb_faculty_names)
        self.second_box.place(relx=0.375, rely=0.75, anchor="center")
        self.third_box = ttk.Combobox(values=sb_faculty_names)
        self.third_box.place(relx=0.625, rely=0.75, anchor="center")
        self.fourth_box = ttk.Combobox(values=sb_faculty_names)
        self.fourth_box.place(relx=0.85, rely=0.75, anchor="center")

        # Preference labels
        self.first_label = tk.Label(text="1st Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.first_label.place(relx=0.15, rely=0.80, anchor="center")
        self.second_label = tk.Label(text="2nd Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.second_label.place(relx=0.375, rely=0.8, anchor="center")
        self.third_label = tk.Label(text="3rd Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", 11, "bold", "italic"))
        self.third_label.place(relx=0.625, rely=0.8, anchor="center")
        self.fourth_label = tk.Label(text="4th Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.fourth_label.place(relx=0.85, rely=0.80, anchor="center")

        # Buttons
        self.back_button = tk.Button(text="Back", height="1", width=10, command=self.go_back)
        self.back_button.place(relx=0.06, rely=0.03, anchor="center")
        self.save_choice = tk.Button(text="Save Choice", height="2", width=15, command=self.save_choice)
        self.save_choice.place(relx=0.5, rely=0.9, anchor="center")

    def save_choice(self):
        global student_username
        self.first_choice = self.first_box.get()
        self.second_choice = self.second_box.get()
        self.third_choice = self.third_box.get()
        self.fourth_choice = self.fourth_box.get()
        globals()["faculty_votes"] = 0

        # if user has voted for all four preferences correctly without errors then save entry and continue
        if (self.first_box.get() in sb_faculty_names and self.second_box.get() in sb_faculty_names and
                self.third_box.get() in sb_faculty_names and self.fourth_box.get() in sb_faculty_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.first_box.get() != self.fourth_box.get() and self.second_box.get() != self.third_box.get() and
                    self.second_box.get() != self.fourth_box.get() and self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    # todo create functionality to show that the input has been saved
                    # todo review notes from to do list about creating a variable to check what user has voted for
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="SB", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()

            # If user selects the same candidate twice
            elif (self.first_box.get() == self.second_box.get() or self.first_box.get() == self.third_box.get() or
                  self.first_box.get() == self.fourth_box.get() or self.second_box.get() == self.third_box.get() or
                  self.second_box.get() == self.fourth_box.get() or self.third_box.get() == self.fourth_box.get()):
                showinfo("window", "You cannot select the same candidate twice. Please try again")

        # if user only votes for first preference
        elif (self.first_box.get() in sb_faculty_names and self.second_box.get() == "" and self.third_box.get() == ""
              and self.fourth_box.get() == ""):
            self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choice")
            if self.msgbox == "yes":
                globals()["faculty_votes"] = 1
                faculty_main(faculty="SB", username=student_username, first_pref=self.first_choice)
                self.go_back()

        # if user votes for 1st and 2nd preference but not 3rd or 4th
        elif (self.first_box.get() in sb_faculty_names and self.second_box.get() in sb_faculty_names and
              self.third_box.get() == "" and self.fourth_box.get() == ""):
            if self.first_box.get() != self.second_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    self.go_back()
                    faculty_main(faculty="SB", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice)
                    self.go_back()

            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 3rd but not 2nd or 4th
        elif (self.first_box.get() in sb_faculty_names and self.second_box.get() == "" and
              self.third_box.get() in sb_faculty_names and self.fourth_box.get() == ""):
            if self.first_box.get() != self.third_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="SB", username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 4th but not 2nd or 3rd
        elif (self.first_box.get() in sb_faculty_names and self.second_box.get() == "" and
              self.third_box.get() == "" and self.fourth_box.get() in sb_faculty_names):
            if self.first_box.get() != self.fourth_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="SB", username=student_username, first_pref=self.first_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 3rd and 4th but not 2nd
        elif (self.first_box.get() in sb_faculty_names and self.second_box.get() == "" and
              self.third_box.get() in sb_faculty_names and self.fourth_box.get() in sb_faculty_names):
            if (self.first_box.get() != self.fourth_box.get() and self.first_box.get() != self.third_box.get() and
                    self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="SB", username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 4th but not 3rd
        elif (self.first_box.get() in sb_faculty_names and self.second_box.get() in sb_faculty_names and
              self.third_box.get() == "" and self.fourth_box.get() in sb_faculty_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.fourth_box.get() and
                    self.second_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="SB", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 3rd but not 4th
        elif (self.first_box.get() in sb_faculty_names and self.second_box.get() in sb_faculty_names and
              self.third_box.get() in sb_faculty_names and self.fourth_box.get() == ""):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.second_box.get() != self.third_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["faculty_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    faculty_main(faculty="SB", username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # Incorrect voting
        else:
            showinfo("Incorrect Input", "You have voted incorrectly please try again")
            # todo enter a message in box that reminds the user how to vote correctly i.e the rules

    def go_back(self):
        self.faculty_label.destroy()
        self.faculty_two_label.destroy()
        self.first_box.destroy()
        self.second_box.destroy()
        self.third_box.destroy()
        self.fourth_box.destroy()
        self.first_label.destroy()
        self.second_label.destroy()
        self.third_label.destroy()
        self.fourth_label.destroy()
        self.back_button.destroy()
        self.save_choice.destroy()
        self.unique_label.destroy()
        self.third_window = ThirdWindow(self.master)


class OfficerWindow:

    def __init__(self, master):
        self.master = master

        # Main Headers
        self.officer_label = tk.Label(text="GSU Officers!", bg="RoyalBlue4", width="100",
                                      height="4", fg="white", font=("Arial", "40", "bold", "italic"))
        self.officer_label.place(relx=0.5, rely=0.10, anchor="center")

        self.officer_two_label = tk.Label(text="Please rank each candidate in order of preference",
                                          bg="RoyalBlue4", width="55", height="4", fg="white",
                                          font=("Arial", "15", "bold", "italic"))
        self.officer_two_label.place(relx=0.5, rely=0.2, anchor="center")

        # todo add four photos to GUI showing icons off candidates

        # All combo boxes

        self.first_box = ttk.Combobox(values=officer_names)
        self.first_box.place(relx=0.15, rely=0.75, anchor="center")
        self.second_box = ttk.Combobox(values=officer_names)
        self.second_box.place(relx=0.375, rely=0.75, anchor="center")
        self.third_box = ttk.Combobox(values=officer_names)
        self.third_box.place(relx=0.625, rely=0.75, anchor="center")
        self.fourth_box = ttk.Combobox(values=officer_names)
        self.fourth_box.place(relx=0.85, rely=0.75, anchor="center")

        # Preference labels
        self.first_label = tk.Label(text="1st Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.first_label.place(relx=0.15, rely=0.80, anchor="center")
        self.second_label = tk.Label(text="2nd Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.second_label.place(relx=0.375, rely=0.8, anchor="center")
        self.third_label = tk.Label(text="3rd Preference", bg="RoyalBlue4", width="12",
                                    height="2", fg="white", font=("Arial", 11, "bold", "italic"))
        self.third_label.place(relx=0.625, rely=0.8, anchor="center")
        self.fourth_label = tk.Label(text="4th Preference", bg="RoyalBlue4", width="12",
                                     height="2", fg="white", font=("Arial", "11", "bold", "italic"))
        self.fourth_label.place(relx=0.85, rely=0.80, anchor="center")

        # Buttons
        self.back_button = tk.Button(text="Back", height="1", width=10, command=self.go_back)
        self.back_button.place(relx=0.06, rely=0.03, anchor="center")
        self.save_choice = tk.Button(text="Save Choice", height="2", width=15, command=self.save_choice)
        self.save_choice.place(relx=0.5, rely=0.9, anchor="center")

    def save_choice(self):
        global student_username
        self.first_choice = self.first_box.get()
        self.second_choice = self.second_box.get()
        self.third_choice = self.third_box.get()
        self.fourth_choice = self.fourth_box.get()
        globals()["officer_votes"] = 0

        # if user has voted for all four preferences correctly without errors then save entry and continue
        if (self.first_box.get() in officer_names and self.second_box.get() in officer_names and
                self.third_box.get() in officer_names and self.fourth_box.get() in officer_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.first_box.get() != self.fourth_box.get() and self.second_box.get() != self.third_box.get() and
                    self.second_box.get() != self.fourth_box.get() and self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    # todo create functionality to show that the input has been saved
                    # todo review notes from to do list about creating a variable to check what user has voted for
                    globals()["officer_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    officer_main(username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()

            # If user selects the same candidate twice
            elif (self.first_box.get() == self.second_box.get() or self.first_box.get() == self.third_box.get() or
                  self.first_box.get() == self.fourth_box.get() or self.second_box.get() == self.third_box.get() or
                  self.second_box.get() == self.fourth_box.get() or self.third_box.get() == self.fourth_box.get()):
                showinfo("window", "You cannot select the same candidate twice. Please try again")

        # if user only votes for first preference
        elif (self.first_box.get() in officer_names and self.second_box.get() == "" and self.third_box.get() == ""
              and self.fourth_box.get() == ""):
            self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choice")
            if self.msgbox == "yes":
                globals()["officer_votes"] = 1
                officer_main(username=student_username, first_pref=self.first_choice)
                self.go_back()

        # if user votes for 1st and 2nd preference but not 3rd or 4th
        elif (self.first_box.get() in officer_names and self.second_box.get() in officer_names and
              self.third_box.get() == "" and self.fourth_box.get() == ""):
            if self.first_box.get() != self.second_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["officer_votes"] = 1
                    officer_main(username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 3rd but not 2nd or 4th
        elif (self.first_box.get() in officer_names and self.second_box.get() == "" and
              self.third_box.get() in officer_names and self.fourth_box.get() == ""):
            if self.first_box.get() != self.third_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["officer_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    officer_main(username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st and 4th but not 2nd or 3rd
        elif (self.first_box.get() in officer_names and self.second_box.get() == "" and
              self.third_box.get() == "" and self.fourth_box.get() in officer_names):
            if self.first_box.get() != self.fourth_box.get():
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["officer_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    officer_main(username=student_username, first_pref=self.first_choice,
                                 fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 3rd and 4th but not 2nd
        elif (self.first_box.get() in officer_names and self.second_box.get() == "" and
              self.third_box.get() in officer_names and self.fourth_box.get() in officer_names):
            if (self.first_box.get() != self.fourth_box.get() and self.first_box.get() != self.third_box.get() and
                    self.third_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["officer_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    officer_main(username=student_username, first_pref=self.first_choice,
                                 third_pref=self.third_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 4th but not 3rd
        elif (self.first_box.get() in officer_names and self.second_box.get() in officer_names and
              self.third_box.get() == "" and self.fourth_box.get() in officer_names):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.fourth_box.get() and
                    self.second_box.get() != self.fourth_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["officer_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    officer_main(username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, fourth_pref=self.fourth_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # if user votes for 1st, 2nd and 3rd but not 4th
        elif (self.first_box.get() in officer_names and self.second_box.get() in officer_names and
              self.third_box.get() in officer_names and self.fourth_box.get() == ""):
            if (self.first_box.get() != self.second_box.get() and self.first_box.get() != self.third_box.get() and
                    self.second_box.get() != self.third_box.get()):
                self.msgbox = tk.messagebox.askquestion("Save & Exit", "Please confirm you are happy with your choices")
                if self.msgbox == "yes":
                    globals()["officer_votes"] = 1
                    # SQLite Query that saves choices straight into relevant table
                    officer_main(username=student_username, first_pref=self.first_choice,
                                 second_pref=self.second_choice, third_pref=self.third_choice)
                    self.go_back()
            else:
                showinfo("Incorrect Input", "You have voted incorrectly. Please try again")

        # Incorrect voting
        else:
            showinfo("Incorrect Input", "You have voted incorrectly please try again")
            # todo enter a message in box that reminds the user how to vote correctly i.e the rules

    def go_back(self):
        self.officer_label.destroy()
        self.officer_two_label.destroy()
        self.first_box.destroy()
        self.second_box.destroy()
        self.third_box.destroy()
        self.fourth_box.destroy()
        self.first_label.destroy()
        self.second_label.destroy()
        self.third_label.destroy()
        self.fourth_label.destroy()
        self.back_button.destroy()
        self.save_choice.destroy()
        self.third_window = ThirdWindow(self.master)


if __name__ == '__main__':
    root = tk.Tk()
    app = MainWindow(root)
    root.mainloop()
