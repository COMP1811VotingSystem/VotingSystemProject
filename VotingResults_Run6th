import sqlite3
from abc import ABC
from NamesLists import president_names, officer_names, as_faculty_names, eh_faculty_names, \
    sb_faculty_names, es_faculty_names

conn = sqlite3.connect("VotingDatabase.db")
c = conn.cursor()

president_results = []
officer_results = []
faculty_results = []


# Abstract class used as for inheritance into each position class shown below.
class CandidateResults(ABC):
    def __init__(self, full_name, faculty, first=0, second=0, third=0, fourth=0):
        self.full_name = full_name
        self.faculty = faculty
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth


class PresidentResults(CandidateResults):
    def __init__(self, full_name, faculty, first=0, second=0, third=0, fourth=0):
        super().__init__(full_name, faculty, first, second, third, fourth)


class OfficerResults(CandidateResults):
    def __init__(self, full_name, faculty, first=0, second=0, third=0, fourth=0):
        super().__init__(full_name, faculty, first, second, third, fourth)


class FacultyResults(CandidateResults):
    def __init__(self, full_name, faculty, first=0, second=0, third=0, fourth=0):
        super().__init__(full_name, faculty, first, second, third, fourth)


c.execute("SELECT Forename, Surname, Faculty FROM Candidate WHERE Position = 'President'")
for x in c:
    president_results.append(PresidentResults(full_name=x[0]+" "+x[1], faculty=x[2]))

c.execute("SELECT Forename, Surname, Faculty FROM Candidate WHERE Position = 'GSU Officer'")
for x in c:
    officer_results.append(OfficerResults(full_name=x[0]+" "+x[1], faculty=x[2]))

c.execute("SELECT Forename, Surname, Faculty FROM Candidate WHERE Position = 'Faculty Officer'")
for x in c:
    faculty_results.append(FacultyResults(full_name=x[0]+" "+x[1], faculty=x[2]))


def president_winner(candidate_list, sql_one, sql_two, voting_list, attr):

    counter_dict = {"counter1": 0, "counter2": 0, "counter3": 0, "counter4": 0,
                    "counter5": 0, "counter6": 0, "counter7": 0, "counter8": 0,
                    "counter9": 0, "counter10": 0, "counter11": 0, "counter12": 0,
                    "counter13": 0, "counter14": 0, "counter15": 0, "counter16": 0}

    if sql_two == "PresidentVotes":
        c.execute(f"SELECT {sql_one} FROM {sql_two}")
        for names in c:
            if candidate_list[0] in names:
                for x in voting_list:
                    if x.full_name == candidate_list[0]:
                        counter_dict["counter1"] += 1
                        setattr(x, attr, counter_dict["counter1"])
            elif candidate_list[1] in names:
                for x in voting_list:
                    if x.full_name == candidate_list[1]:
                        counter_dict["counter2"] += 1
                        setattr(x, attr, counter_dict["counter2"])
            elif candidate_list[2] in names:
                for x in voting_list:
                    if x.full_name == candidate_list[2]:
                        counter_dict["counter3"] += 1
                        setattr(x, attr, counter_dict["counter3"])
            elif candidate_list[3] in names:
                for x in voting_list:
                    if x.full_name == candidate_list[3]:
                        counter_dict["counter4"] += 1
                        setattr(x, attr, counter_dict["counter4"])
    elif sql_two == "FacultyOfficerVotes":
        pass

    elif sql_two == "GSUOfficerVotes":
        pass


president_winner(president_names, "FirstPreference", "PresidentVotes",
                 president_results, "first")
president_winner(president_names, "SecondPreference", "PresidentVotes",
                 president_results, "second")
president_winner(president_names, "ThirdPreference", "PresidentVotes",
                 president_results, "third")
president_winner(president_names, "FourthPreference", "PresidentVotes",
                 president_results, "fourth")



#for x in president_results:
#    print(x.full_name+" "+str(x.first)+" "+str(x.second)+" "+str(x.third)+" "+str(x.fourth))
