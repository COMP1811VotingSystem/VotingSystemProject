import sqlite3
from abc import ABC

conn = sqlite3.connect("VotingDatabase.db")
c = conn.cursor()

president_results = []
officer_results = []
faculty_results = []


# Abstract class used as for inheritance into each position class shown below.
class CandidateResults(ABC):
    def __init__(self, full_name, faculty, first=0, second=0, third=0, fourth=0):
        self.full_name = full_name
        self.faculty = faculty
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth


class PresidentResults(CandidateResults):
    def __init__(self, full_name, faculty, first=0, second=0, third=0, fourth=0):
        super().__init__(full_name, faculty, first, second, third, fourth)


class OfficerResults(CandidateResults):
    def __init__(self, full_name, faculty, first=0, second=0, third=0, fourth=0):
        super().__init__(full_name, faculty, first, second, third, fourth)


class FacultyResults(CandidateResults):
    def __init__(self, full_name, faculty, first=0, second=0, third=0, fourth=0):
        super().__init__(full_name, faculty, first, second, third, fourth)


c.execute("SELECT Forename, Surname, Faculty FROM Candidate WHERE Position = 'President'")
for x in c:
    president_results.append(PresidentResults(full_name=x[0]+" "+x[1], faculty=x[2]))

c.execute("SELECT Forename, Surname, Faculty FROM Candidate WHERE Position = 'GSU Officer'")
for x in c:
    officer_results.append(OfficerResults(full_name=x[0]+" "+x[1], faculty=x[2]))

c.execute("SELECT Forename, Surname, Faculty FROM Candidate WHERE Position = 'Faculty Officer'")
for x in c:
    faculty_results.append(FacultyResults(full_name=x[0]+" "+x[1], faculty=x[2]))


def president_winner(cand_one, cand_two, cand_three, cand_four, sql_one,
                     sql_two, voting_list, attr):
    """
    :param cand_*: name of each candidate in the order they are in the president_results list
    :param sql_one: SQL name of the column within a table
    :param sql_two: SQL name of the table
    :param voting_list: list which is an actual object
    :param attr: specific preference within the list of candidate objects
    :return: counts votes for each person and adds them to the list of objects
    """
    counter_one = 0
    counter_two = 0
    counter_three = 0
    counter_four = 0

    c.execute(f"SELECT {sql_one} FROM {sql_two}")
    for names in c:
        if cand_one in names:
            for x in voting_list:
                if x.full_name == cand_one:
                    counter_one +=1
                    setattr(x, attr, counter_one)

        elif cand_two in names:
            for x in voting_list:
                if x.full_name == cand_two:
                    counter_two += 1
                    setattr(x, attr, counter_two)

        elif cand_three in names:
            for x in voting_list:
                if x.full_name == cand_three:
                    counter_three += 1
                    setattr(x, attr, counter_three)

        elif cand_four in names:
            for x in voting_list:
                if x.full_name == cand_four:
                    counter_four += 1
                    setattr(x, attr, counter_four)


president_winner("Indi Franklin", "Andrei Keely", "Esther Barracks",
                 "Ryan Hays", "FirstPreference", "PresidentVotes",
                 president_results, "first")
president_winner("Indi Franklin", "Andrei Keely", "Esther Barracks",
                 "Ryan Hays", "SecondPreference", "PresidentVotes",
                 president_results, "second")
president_winner("Indi Franklin", "Andrei Keely", "Esther Barracks",
                 "Ryan Hays", "ThirdPreference", "PresidentVotes",
                 president_results, "third")
president_winner("Indi Franklin", "Andrei Keely", "Esther Barracks",
                 "Ryan Hays", "FourthPreference", "PresidentVotes",
                 president_results, "fourth")


for x in president_results:
    print(x.full_name+" "+str(x.first)+" "+str(x.second)+" "+str(x.third)+" "+str(x.fourth))
